#!/usr/bin/env python3
"""plot_cadence_power.py
usage: plot_cadence_power.py [-h] -i INPUT [--title TITLE] [-c CUSTOM [CUSTOM ...]] [-a A_TRAINING_TRACKER [A_TRAINING_TRACKER ...]]
                             [-t TCX_FILES [TCX_FILES ...]]

Plots data from several power meters over time

options:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        The folder containing the CSV files. (default: None)
  --title TITLE         Title to put on the figure (default: Comparison between power meters)

Importers:
  Importers allow data in different formats to be processed.

  -c CUSTOM [CUSTOM ...], --custom CUSTOM [CUSTOM ...]
                        Folders containing data generated by log_power_meter.py. Data is formatted as a series of pairs of FOLDERNAME[,DISPLAY_NAME,OFFSET]]. If
                        the display name is not critical, FOLDERNAME is sufficient. (default: None)
  -a A_TRAINING_TRACKER [A_TRAINING_TRACKER ...], --a-training-tracker A_TRAINING_TRACKER [A_TRAINING_TRACKER ...]
                        CSV file generated by the A Training Tracker App (or similar). Data is formatted as a series of sets of
                        FOLDERNAME[,DISPLAY_NAME,[OFFSET]]. If the display name is not critical, FOLDERNAME is sufficient. (default: None)
  -t TCX_FILES [TCX_FILES ...], --tcx-files TCX_FILES [TCX_FILES ...]
                        TCX file to import. Data is formatted as a series of sets of FOLDERNAME[,DISPLAY_NAME,[OFFSET]]. If the display name is not critical,
                        FOLDERNAME is sufficient. (default: None)

Written by Jotham Gates and Oscar Varney for MHP, 2024
"""
import pandas as pd
import numpy as np
from typing import Tuple, List, Union
from matplotlib.axes import Axes
import matplotlib.pyplot as plt
import argparse
from abc import ABC, abstractmethod
import datetime

class Importer(ABC):
    """Base class for importing power and cadence data."""
    def __init__(self, name:str, offset:float): # , df:pd.DataFrame, offset:float):
        self.df = None
        self.name = name
        self.offset = offset

    @abstractmethod
    def load(self) -> None:
        """Imports the data and applies the specified offset.
        Call self._load to apply the offset and save the frame."""
        pass

    def _load(self, df:pd.DataFrame) -> None:
        """Imports the data and applies the specified offset."""
        self.df = df
        self.df["Unix Timestamp [s]"] += self.offset

    def get_data(self) -> pd.DataFrame:
        """Returns the cadence over time.

        Returns:
            pd.DataFrame: Dataframe with at least columns
                          - "Unix Timestamp [s]"
                          - "Cadence [rpm]"
                          - "Power [W]"
                          - "Balance [%]"
        """
        if self.df is not None:
            return self.df
        else:
            raise ValueError("self.load() has not been called prior.")

class MHPCSVImporter(Importer):
    """Importer for logs generated by log_power_meter.py"""
    def __init__(self, folder:str, offset:float, name:str="Custom power meter"):
        super().__init__(name, offset)
        self.folder = folder
    
    def load(self) -> None:
        return self._load(pd.read_csv(f"{self.folder}/slow.csv"))

class ATrainingTrackerCSVImporter(Importer):
    """Importer for CSV files generated by the A Training Tracker app (and MHP's variant of it)."""
    def __init__(self, file:str, offset:float, name:str="A training tracker"):
        super().__init__(name, offset)
        self.file = file
    
    def load(self) -> None:
        imported_df = pd.read_csv(self.file)
        processed_df = pd.DataFrame({
            "Unix Timestamp [s]": self.convert_timestamps(imported_df["time"]),
            "Cadence [rpm]": imported_df["CADENCE"],
            "Power [W]": imported_df["POWER"],
            "Balance [%]": imported_df["PEDAL_POWER_BALANCE"]
        })
        return self._load(processed_df)

    def convert_timestamps(self, column:pd.Series) -> pd.Series:
        def str_to_unix(date_str:str) -> float:
            date = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=datetime.timezone.utc)
            timestamp = date.timestamp()
            return timestamp
        return column.apply(str_to_unix)

class TCXImporter(Importer):
    """Imports TCX files"""
    def __init__(self, file:str, offset:float, name:str="TCX file"):
        raise NotImplementedError("Need to implement")
        super().__init__(name)

def plot_axes(axes:Axes, field:str, importers:List[Importer]) -> None:
    """Plots the data for all importers over an axes.

    Args:
        axes (Axes): Axes to plot on.
        field (str): Field to get from the importer.
        importers (List[Importer]): List of importers to plot.
    """
    for i in importers:
        data = i.get_data()
        axes.plot(data["Unix Timestamp [s]"].values, data[field].values, label=i.name)

def plot_graph(importers:List[Importer], title:str) -> None:
    """Plots strain over time.

    Args:
        left_df (pd.DataFrame): Left data
        right_df (pd.DataFrame): Right data
        title (str): The title to use.
    """
    # Create a figure with a raw subplot.
    fig = plt.figure()
    gs = fig.add_gridspec(3, height_ratios=[1, 1, 1])
    ax_cadence, ax_power, ax_balance = gs.subplots(sharex=True)
    ax_cadence:Axes
    ax_power:Axes
    ax_balance:Axes

    # Plot the cadence axes
    plot_axes(ax_cadence, "Cadence [rpm]", importers)
    ax_cadence.set_title("Cadence")
    ax_cadence.set_ylabel("Cadence [$rpm$]")
    ax_cadence.legend(loc="upper center")

    # Plot the power axes
    plot_axes(ax_power, "Power [W]", importers)
    ax_power.set_title("Power")
    ax_power.set_ylabel("Power [$W$]")

    # Plot the power balance
    plot_axes(ax_balance, "Balance [%]", importers)
    ax_balance.set_title("Power balance between left and right sides")
    ax_balance.set_ylabel("Balance [%]")
    ax_balance.set_xlabel("Time [s]")

    plt.suptitle(title)
    plt.tight_layout()
    plt.show()

def load_all(importers: List[Importer]) -> None:
    """Loads all data.

    Args:
        importers (List[Importer]): The importers to load.
    """
    for i in importers:
        i.load()

def importer_name_pair(argument:str) -> Tuple[str, str]:
    """Parser for an importer.

    Args:
        argument (str): The input argument containing the filename and optionally the name to show, separated by a comma.

    Returns:
        Tuple[str, str]: Filename followed by display name. If no display name was provided, the filename will be used instead.
    """
    args = argument.split(",")
    if len(args) == 1:
        # Filename only
        return args[0], args[0], 0
    elif len(args) == 2:
        # Filename and display name
        return args[0], args[1], 0
    elif len(args) == 3:
        # Filename, display name, offset
        return args[0], args[1], float(args[2])
    else:
        # Something weird.
        print(f"Incorrect number of arguments in a pair '{argument}', expected FILENAME,DISPLAY_NAME")
        raise argparse.ArgumentError()

def custom_importer_pair(argument:str) -> MHPCSVImporter:
    """Parser that returns the importer.

    Args:
        argument (str): Argument to import.

    Returns:
        MHPCSVImporter: Importer matching the requests.
    """
    folder, display, offset = importer_name_pair(argument)
    try:
        importer = MHPCSVImporter(folder, offset, display)
    except Exception as e:
        print(e)
        raise argparse.ArgumentError()
    else:
        return importer

def a_training_tracker_importer_pair(argument:str) -> ATrainingTrackerCSVImporter:
    """Parser that returns the importer.

    Args:
        argument (str): Argument to import.

    Returns:
        ATrainingTrackerImporter: Importer matching the requests.
    """
    file, display, offset = importer_name_pair(argument)
    return ATrainingTrackerCSVImporter(file, offset, display)

def tcx_importer_pair(argument:str) -> TCXImporter:
    """Parser that returns the importer.

    Args:
        argument (str): Argument to import.

    Returns:
        TCXImporter: Importer matching the requests.
    """
    file, display, offset = importer_name_pair(argument)
    return TCXImporter(file, offset, display)

def none_empty_list(inpt: Union[List[Importer], None]) -> List[Importer]:
    if inpt is None:
        return []
    else:
        return inpt

if __name__ == "__main__":
    # Extract command line arguments
    parser = argparse.ArgumentParser(
        description="Plots data from several power meters over time",
        conflict_handler="resolve",  # Cope with -h being used for host like mosquitto clients
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        epilog="Written by Jotham Gates and Oscar Varney for MHP, 2024",
    )
    parser.add_argument(
        "--title",
        help="Title to put on the figure",
        type=str,
        default="Comparison between power meters",
    )
    importer_group = parser.add_argument_group(
        "Importers",
        "Importers allow data in different formats to be processed."
    )
    importer_group.add_argument(
        "-c",
        "--custom",
        help="Folders containing data generated by log_power_meter.py. Data is formatted as a series of tuples of FOLDERNAME[,DISPLAY_NAME,OFFSET]]. If the display name is not provided, the folder name will be used and the offset set to 0. The offset (in seconds) defaults to 0 if not specified.",
        type=custom_importer_pair,
        nargs="+"
    )
    importer_group.add_argument(
        "-a",
        "--a-training-tracker",
        help="CSV file generated by the A Training Tracker App (or similar). Data is formatted as a series of sets of FOLDERNAME[,DISPLAY_NAME,[OFFSET]].  If the display name is not provided, the file name will be used and the offset set to 0. The offset (in seconds) defaults to 0 if not specified.",
        type=a_training_tracker_importer_pair,
        nargs="+"
    )
    importer_group.add_argument(
        "-t",
        "--tcx-files",
        help="TCX file to import. Data is formatted as a series of sets of FOLDERNAME[,DISPLAY_NAME,[OFFSET]].  If the display name is not provided, the folder name will be used and the offset set to 0. The offset (in seconds) defaults to 0 if not specified.",
        type=tcx_importer_pair,
        nargs="+"
    )
    args = parser.parse_args()
    importers: List[Importer] = none_empty_list(args.custom) + none_empty_list(args.a_training_tracker) + none_empty_list(args.tcx_files)
    load_all(importers)
    plot_graph(importers, args.title)
    